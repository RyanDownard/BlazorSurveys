@page "/survey-details/{Id:guid}"
@using BlazorSurveys.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject SurveyHttpClient SurveyHttpClient
@inject HubConnection HubConnection
@implements IAsyncDisposable

@if (survey is null)
{
    <p><em>Loading....</em></p>
}
else
{
    <h1 class="mb-4">@survey.Title</h1>

    <p>Cast your vote by clicking in one of the options below</p>
    <ul class="list-group mb-4">
        @foreach (var option in survey.Options)
        {
            <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" @onclick="@(async () => await OnAnswer(option))">
                @option
                <span class="badge badge-primary badge-pill">
                    @(survey.Answers.Where(i => i.Option == option).Count())
                </span>
            </button>
        }
    </ul>

    <SurveyExpiration Expirable=survey class="text-right" />
}

@code {
    [Parameter]
    public Guid id { get; set; }
    private Survey survey;

    protected override async Task OnInitializedAsync()
    {
        survey = await SurveyHttpClient.GetSurvey(id);

        await HubConnection.InvokeAsync("JoinSurveyGroup", id);

        HubConnection.On<Survey>("SurveyUpdated", survey =>
        {
            this.survey = survey;
            StateHasChanged();
        });
    }

    private async Task OnAnswer(string option)
    {
        if (((IExpirable)survey).IsExpired) return;
        await SurveyHttpClient.AnswerSurvey(id, new SurveyAnswer
        {
            Option = option
        });
    }

    public async ValueTask DisposeAsync()
    {
        HubConnection.Remove("SurveyUpdated");
        await HubConnection.InvokeAsync("LeaveSurveyGroup", id);
    }
}
